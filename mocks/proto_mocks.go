// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/chremoas/auth-srv/proto (interfaces: UserAuthenticationClient,EntityQueryClient,UserAuthenticationAdminClient,EntityAdminClient)

package mocks

import (
	proto "github.com/chremoas/auth-srv/proto"
	gomock "github.com/golang/mock/gomock"
	client "github.com/micro/go-micro/client"
	context "golang.org/x/net/context"
)

// Mock of UserAuthenticationClient interface
type MockUserAuthenticationClient struct {
	ctrl     *gomock.Controller
	recorder *_MockUserAuthenticationClientRecorder
}

// Recorder for MockUserAuthenticationClient (not exported)
type _MockUserAuthenticationClientRecorder struct {
	mock *MockUserAuthenticationClient
}

func NewMockUserAuthenticationClient(ctrl *gomock.Controller) *MockUserAuthenticationClient {
	mock := &MockUserAuthenticationClient{ctrl: ctrl}
	mock.recorder = &_MockUserAuthenticationClientRecorder{mock}
	return mock
}

func (_m *MockUserAuthenticationClient) EXPECT() *_MockUserAuthenticationClientRecorder {
	return _m.recorder
}

func (_m *MockUserAuthenticationClient) Confirm(_param0 context.Context, _param1 *proto.AuthConfirmRequest, _param2 ...client.CallOption) (*proto.AuthConfirmResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Confirm", _s...)
	ret0, _ := ret[0].(*proto.AuthConfirmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationClientRecorder) Confirm(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Confirm", _s...)
}

func (_m *MockUserAuthenticationClient) Create(_param0 context.Context, _param1 *proto.AuthCreateRequest, _param2 ...client.CallOption) (*proto.AuthCreateResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Create", _s...)
	ret0, _ := ret[0].(*proto.AuthCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationClientRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", _s...)
}

func (_m *MockUserAuthenticationClient) GetRoles(_param0 context.Context, _param1 *proto.GetRolesRequest, _param2 ...client.CallOption) (*proto.AuthConfirmResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetRoles", _s...)
	ret0, _ := ret[0].(*proto.AuthConfirmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationClientRecorder) GetRoles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRoles", _s...)
}

// Mock of EntityQueryClient interface
type MockEntityQueryClient struct {
	ctrl     *gomock.Controller
	recorder *_MockEntityQueryClientRecorder
}

// Recorder for MockEntityQueryClient (not exported)
type _MockEntityQueryClientRecorder struct {
	mock *MockEntityQueryClient
}

func NewMockEntityQueryClient(ctrl *gomock.Controller) *MockEntityQueryClient {
	mock := &MockEntityQueryClient{ctrl: ctrl}
	mock.recorder = &_MockEntityQueryClientRecorder{mock}
	return mock
}

func (_m *MockEntityQueryClient) EXPECT() *_MockEntityQueryClientRecorder {
	return _m.recorder
}

func (_m *MockEntityQueryClient) GetAlliances(_param0 context.Context, _param1 *proto.EntityQueryRequest, _param2 ...client.CallOption) (*proto.AlliancesResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAlliances", _s...)
	ret0, _ := ret[0].(*proto.AlliancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityQueryClientRecorder) GetAlliances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAlliances", _s...)
}

func (_m *MockEntityQueryClient) GetCharacters(_param0 context.Context, _param1 *proto.EntityQueryRequest, _param2 ...client.CallOption) (*proto.CharactersResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetCharacters", _s...)
	ret0, _ := ret[0].(*proto.CharactersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityQueryClientRecorder) GetCharacters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCharacters", _s...)
}

func (_m *MockEntityQueryClient) GetCorporations(_param0 context.Context, _param1 *proto.EntityQueryRequest, _param2 ...client.CallOption) (*proto.CorporationsResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetCorporations", _s...)
	ret0, _ := ret[0].(*proto.CorporationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityQueryClientRecorder) GetCorporations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCorporations", _s...)
}

func (_m *MockEntityQueryClient) GetRoles(_param0 context.Context, _param1 *proto.EntityQueryRequest, _param2 ...client.CallOption) (*proto.RoleResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetRoles", _s...)
	ret0, _ := ret[0].(*proto.RoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityQueryClientRecorder) GetRoles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRoles", _s...)
}

// Mock of UserAuthenticationAdminClient interface
type MockUserAuthenticationAdminClient struct {
	ctrl     *gomock.Controller
	recorder *_MockUserAuthenticationAdminClientRecorder
}

// Recorder for MockUserAuthenticationAdminClient (not exported)
type _MockUserAuthenticationAdminClientRecorder struct {
	mock *MockUserAuthenticationAdminClient
}

func NewMockUserAuthenticationAdminClient(ctrl *gomock.Controller) *MockUserAuthenticationAdminClient {
	mock := &MockUserAuthenticationAdminClient{ctrl: ctrl}
	mock.recorder = &_MockUserAuthenticationAdminClientRecorder{mock}
	return mock
}

func (_m *MockUserAuthenticationAdminClient) EXPECT() *_MockUserAuthenticationAdminClientRecorder {
	return _m.recorder
}

func (_m *MockUserAuthenticationAdminClient) AllianceCharacterLeadershipRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AllianceCharacterLeadershipRoleAdd", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) AllianceCharacterLeadershipRoleAdd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllianceCharacterLeadershipRoleAdd", _s...)
}

func (_m *MockUserAuthenticationAdminClient) AllianceCharacterLeadershipRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AllianceCharacterLeadershipRoleRemove", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) AllianceCharacterLeadershipRoleRemove(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllianceCharacterLeadershipRoleRemove", _s...)
}

func (_m *MockUserAuthenticationAdminClient) AllianceRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AllianceRoleAdd", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) AllianceRoleAdd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllianceRoleAdd", _s...)
}

func (_m *MockUserAuthenticationAdminClient) AllianceRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AllianceRoleRemove", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) AllianceRoleRemove(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllianceRoleRemove", _s...)
}

func (_m *MockUserAuthenticationAdminClient) CharacterRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CharacterRoleAdd", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) CharacterRoleAdd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CharacterRoleAdd", _s...)
}

func (_m *MockUserAuthenticationAdminClient) CharacterRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CharacterRoleRemove", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) CharacterRoleRemove(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CharacterRoleRemove", _s...)
}

func (_m *MockUserAuthenticationAdminClient) CorporationAllianceRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CorporationAllianceRoleAdd", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) CorporationAllianceRoleAdd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CorporationAllianceRoleAdd", _s...)
}

func (_m *MockUserAuthenticationAdminClient) CorporationAllianceRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CorporationAllianceRoleRemove", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) CorporationAllianceRoleRemove(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CorporationAllianceRoleRemove", _s...)
}

func (_m *MockUserAuthenticationAdminClient) CorporationCharacterLeadershipRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CorporationCharacterLeadershipRoleAdd", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) CorporationCharacterLeadershipRoleAdd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CorporationCharacterLeadershipRoleAdd", _s...)
}

func (_m *MockUserAuthenticationAdminClient) CorporationCharacterLeadershipRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CorporationCharacterLeadershipRoleRemove", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) CorporationCharacterLeadershipRoleRemove(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CorporationCharacterLeadershipRoleRemove", _s...)
}

func (_m *MockUserAuthenticationAdminClient) CorporationRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CorporationRoleAdd", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) CorporationRoleAdd(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CorporationRoleAdd", _s...)
}

func (_m *MockUserAuthenticationAdminClient) CorporationRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CorporationRoleRemove", _s...)
	ret0, _ := ret[0].(*proto.AuthAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserAuthenticationAdminClientRecorder) CorporationRoleRemove(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CorporationRoleRemove", _s...)
}

// Mock of EntityAdminClient interface
type MockEntityAdminClient struct {
	ctrl     *gomock.Controller
	recorder *_MockEntityAdminClientRecorder
}

// Recorder for MockEntityAdminClient (not exported)
type _MockEntityAdminClientRecorder struct {
	mock *MockEntityAdminClient
}

func NewMockEntityAdminClient(ctrl *gomock.Controller) *MockEntityAdminClient {
	mock := &MockEntityAdminClient{ctrl: ctrl}
	mock.recorder = &_MockEntityAdminClientRecorder{mock}
	return mock
}

func (_m *MockEntityAdminClient) EXPECT() *_MockEntityAdminClientRecorder {
	return _m.recorder
}

func (_m *MockEntityAdminClient) AllianceUpdate(_param0 context.Context, _param1 *proto.AllianceAdminRequest, _param2 ...client.CallOption) (*proto.EntityAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AllianceUpdate", _s...)
	ret0, _ := ret[0].(*proto.EntityAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityAdminClientRecorder) AllianceUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllianceUpdate", _s...)
}

func (_m *MockEntityAdminClient) CharacterUpdate(_param0 context.Context, _param1 *proto.CharacterAdminRequest, _param2 ...client.CallOption) (*proto.EntityAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CharacterUpdate", _s...)
	ret0, _ := ret[0].(*proto.EntityAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityAdminClientRecorder) CharacterUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CharacterUpdate", _s...)
}

func (_m *MockEntityAdminClient) CorporationUpdate(_param0 context.Context, _param1 *proto.CorporationAdminRequest, _param2 ...client.CallOption) (*proto.EntityAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CorporationUpdate", _s...)
	ret0, _ := ret[0].(*proto.EntityAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityAdminClientRecorder) CorporationUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CorporationUpdate", _s...)
}

func (_m *MockEntityAdminClient) RoleUpdate(_param0 context.Context, _param1 *proto.RoleAdminRequest, _param2 ...client.CallOption) (*proto.EntityAdminResponse, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RoleUpdate", _s...)
	ret0, _ := ret[0].(*proto.EntityAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEntityAdminClientRecorder) RoleUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RoleUpdate", _s...)
}
