// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/micro/go-micro/client (interfaces: Client)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/micro/go-micro/client"
	context "golang.org/x/net/context"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) Call(_param0 context.Context, _param1 client.Request, _param2 interface{}, _param3 ...client.CallOption) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Call", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) Call(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Call", _s...)
}

func (_m *MockClient) CallRemote(_param0 context.Context, _param1 string, _param2 client.Request, _param3 interface{}, _param4 ...client.CallOption) error {
	_s := []interface{}{_param0, _param1, _param2, _param3}
	for _, _x := range _param4 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CallRemote", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) CallRemote(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CallRemote", _s...)
}

func (_m *MockClient) Init(_param0 ...client.Option) error {
	_s := []interface{}{}
	for _, _x := range _param0 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Init", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) Init(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Init", arg0...)
}

func (_m *MockClient) NewJsonRequest(_param0 string, _param1 string, _param2 interface{}, _param3 ...client.RequestOption) client.Request {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NewJsonRequest", _s...)
	ret0, _ := ret[0].(client.Request)
	return ret0
}

func (_mr *_MockClientRecorder) NewJsonRequest(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewJsonRequest", _s...)
}

func (_m *MockClient) NewProtoRequest(_param0 string, _param1 string, _param2 interface{}, _param3 ...client.RequestOption) client.Request {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NewProtoRequest", _s...)
	ret0, _ := ret[0].(client.Request)
	return ret0
}

func (_mr *_MockClientRecorder) NewProtoRequest(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewProtoRequest", _s...)
}

func (_m *MockClient) NewPublication(_param0 string, _param1 interface{}) client.Publication {
	ret := _m.ctrl.Call(_m, "NewPublication", _param0, _param1)
	ret0, _ := ret[0].(client.Publication)
	return ret0
}

func (_mr *_MockClientRecorder) NewPublication(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewPublication", arg0, arg1)
}

func (_m *MockClient) NewRequest(_param0 string, _param1 string, _param2 interface{}, _param3 ...client.RequestOption) client.Request {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "NewRequest", _s...)
	ret0, _ := ret[0].(client.Request)
	return ret0
}

func (_mr *_MockClientRecorder) NewRequest(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewRequest", _s...)
}

func (_m *MockClient) Options() client.Options {
	ret := _m.ctrl.Call(_m, "Options")
	ret0, _ := ret[0].(client.Options)
	return ret0
}

func (_mr *_MockClientRecorder) Options() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Options")
}

func (_m *MockClient) Publish(_param0 context.Context, _param1 client.Publication, _param2 ...client.PublishOption) error {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Publish", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockClientRecorder) Publish(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", _s...)
}

func (_m *MockClient) Stream(_param0 context.Context, _param1 client.Request, _param2 ...client.CallOption) (client.Streamer, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Stream", _s...)
	ret0, _ := ret[0].(client.Streamer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) Stream(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stream", _s...)
}

func (_m *MockClient) StreamRemote(_param0 context.Context, _param1 string, _param2 client.Request, _param3 ...client.CallOption) (client.Streamer, error) {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "StreamRemote", _s...)
	ret0, _ := ret[0].(client.Streamer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) StreamRemote(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StreamRemote", _s...)
}

func (_m *MockClient) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockClientRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}
