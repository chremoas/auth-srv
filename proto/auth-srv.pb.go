// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth-srv.proto

/*
Package abaeve_auth is a generated protocol buffer package.

It is generated from these files:
	auth-srv.proto

It has these top-level messages:
	AuthCreateRequest
	AuthCreateResponse
	AuthConfirmRequest
	AuthConfirmResponse
	GetRolesRequest
	AuthAdminRequest
	AuthAdminResponse
	CharactersResponse
	Character
	RoleResponse
	Role
	CorporationsResponse
	Corporation
	AlliancesResponse
	Alliance
	EntityAdminResponse
	AllianceAdminRequest
	CoporationAdminRequest
	CharacterAdminRequest
	RoleAdminRequest
	EntityQueryRequest
*/
package abaeve_auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EntityType int32

const (
	EntityType_ALLIANCE    EntityType = 0
	EntityType_CORPORATION EntityType = 1
	EntityType_CHARACTER   EntityType = 2
	EntityType_ROLE        EntityType = 3
)

var EntityType_name = map[int32]string{
	0: "ALLIANCE",
	1: "CORPORATION",
	2: "CHARACTER",
	3: "ROLE",
}
var EntityType_value = map[string]int32{
	"ALLIANCE":    0,
	"CORPORATION": 1,
	"CHARACTER":   2,
	"ROLE":        3,
}

func (x EntityType) String() string {
	return proto.EnumName(EntityType_name, int32(x))
}
func (EntityType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EntityOperation int32

const (
	EntityOperation_ADD_OR_UPDATE EntityOperation = 0
	EntityOperation_REMOVE        EntityOperation = 1
)

var EntityOperation_name = map[int32]string{
	0: "ADD_OR_UPDATE",
	1: "REMOVE",
}
var EntityOperation_value = map[string]int32{
	"ADD_OR_UPDATE": 0,
	"REMOVE":        1,
}

func (x EntityOperation) String() string {
	return proto.EnumName(EntityOperation_name, int32(x))
}
func (EntityOperation) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AuthCreateRequest struct {
	Token       string       `protobuf:"bytes,1,opt,name=Token,json=token" json:"Token,omitempty"`
	Character   *Character   `protobuf:"bytes,2,opt,name=Character,json=character" json:"Character,omitempty"`
	Corporation *Corporation `protobuf:"bytes,3,opt,name=Corporation,json=corporation" json:"Corporation,omitempty"`
	Alliance    *Alliance    `protobuf:"bytes,4,opt,name=Alliance,json=alliance" json:"Alliance,omitempty"`
	AuthScope   []string     `protobuf:"bytes,5,rep,name=AuthScope,json=authScope" json:"AuthScope,omitempty"`
}

func (m *AuthCreateRequest) Reset()                    { *m = AuthCreateRequest{} }
func (m *AuthCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthCreateRequest) ProtoMessage()               {}
func (*AuthCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthCreateRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AuthCreateRequest) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *AuthCreateRequest) GetCorporation() *Corporation {
	if m != nil {
		return m.Corporation
	}
	return nil
}

func (m *AuthCreateRequest) GetAlliance() *Alliance {
	if m != nil {
		return m.Alliance
	}
	return nil
}

func (m *AuthCreateRequest) GetAuthScope() []string {
	if m != nil {
		return m.AuthScope
	}
	return nil
}

type AuthCreateResponse struct {
	AuthenticationCode string `protobuf:"bytes,1,opt,name=AuthenticationCode,json=authenticationCode" json:"AuthenticationCode,omitempty"`
	Success            bool   `protobuf:"varint,2,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AuthCreateResponse) Reset()                    { *m = AuthCreateResponse{} }
func (m *AuthCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthCreateResponse) ProtoMessage()               {}
func (*AuthCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthCreateResponse) GetAuthenticationCode() string {
	if m != nil {
		return m.AuthenticationCode
	}
	return ""
}

func (m *AuthCreateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type AuthConfirmRequest struct {
	UserId             string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	AuthenticationCode string `protobuf:"bytes,2,opt,name=AuthenticationCode,json=authenticationCode" json:"AuthenticationCode,omitempty"`
}

func (m *AuthConfirmRequest) Reset()                    { *m = AuthConfirmRequest{} }
func (m *AuthConfirmRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthConfirmRequest) ProtoMessage()               {}
func (*AuthConfirmRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthConfirmRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AuthConfirmRequest) GetAuthenticationCode() string {
	if m != nil {
		return m.AuthenticationCode
	}
	return ""
}

type AuthConfirmResponse struct {
	Success       bool     `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
	CharacterName string   `protobuf:"bytes,2,opt,name=CharacterName,json=characterName" json:"CharacterName,omitempty"`
	Roles         []string `protobuf:"bytes,3,rep,name=Roles,json=roles" json:"Roles,omitempty"`
}

func (m *AuthConfirmResponse) Reset()                    { *m = AuthConfirmResponse{} }
func (m *AuthConfirmResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthConfirmResponse) ProtoMessage()               {}
func (*AuthConfirmResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthConfirmResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AuthConfirmResponse) GetCharacterName() string {
	if m != nil {
		return m.CharacterName
	}
	return ""
}

func (m *AuthConfirmResponse) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type GetRolesRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
}

func (m *GetRolesRequest) Reset()                    { *m = GetRolesRequest{} }
func (m *GetRolesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRolesRequest) ProtoMessage()               {}
func (*GetRolesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetRolesRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type AuthAdminRequest struct {
	EntityId     []int64      `protobuf:"varint,1,rep,packed,name=EntityId,json=entityId" json:"EntityId,omitempty"`
	EntityName   []string     `protobuf:"bytes,2,rep,name=EntityName,json=entityName" json:"EntityName,omitempty"`
	EntityTicker []string     `protobuf:"bytes,3,rep,name=EntityTicker,json=entityTicker" json:"EntityTicker,omitempty"`
	EntityType   []EntityType `protobuf:"varint,4,rep,packed,name=EntityType,json=entityType,enum=abaeve.auth.EntityType" json:"EntityType,omitempty"`
	Role         string       `protobuf:"bytes,5,opt,name=Role,json=role" json:"Role,omitempty"`
}

func (m *AuthAdminRequest) Reset()                    { *m = AuthAdminRequest{} }
func (m *AuthAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthAdminRequest) ProtoMessage()               {}
func (*AuthAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AuthAdminRequest) GetEntityId() []int64 {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *AuthAdminRequest) GetEntityName() []string {
	if m != nil {
		return m.EntityName
	}
	return nil
}

func (m *AuthAdminRequest) GetEntityTicker() []string {
	if m != nil {
		return m.EntityTicker
	}
	return nil
}

func (m *AuthAdminRequest) GetEntityType() []EntityType {
	if m != nil {
		return m.EntityType
	}
	return nil
}

func (m *AuthAdminRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type AuthAdminResponse struct {
	EntityId   []int64      `protobuf:"varint,1,rep,packed,name=EntityId,json=entityId" json:"EntityId,omitempty"`
	EntityName []string     `protobuf:"bytes,2,rep,name=EntityName,json=entityName" json:"EntityName,omitempty"`
	EntityType []EntityType `protobuf:"varint,3,rep,packed,name=EntityType,json=entityType,enum=abaeve.auth.EntityType" json:"EntityType,omitempty"`
	Success    bool         `protobuf:"varint,4,opt,name=Success,json=success" json:"Success,omitempty"`
}

func (m *AuthAdminResponse) Reset()                    { *m = AuthAdminResponse{} }
func (m *AuthAdminResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthAdminResponse) ProtoMessage()               {}
func (*AuthAdminResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AuthAdminResponse) GetEntityId() []int64 {
	if m != nil {
		return m.EntityId
	}
	return nil
}

func (m *AuthAdminResponse) GetEntityName() []string {
	if m != nil {
		return m.EntityName
	}
	return nil
}

func (m *AuthAdminResponse) GetEntityType() []EntityType {
	if m != nil {
		return m.EntityType
	}
	return nil
}

func (m *AuthAdminResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CharactersResponse struct {
	List []*Character `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *CharactersResponse) Reset()                    { *m = CharactersResponse{} }
func (m *CharactersResponse) String() string            { return proto.CompactTextString(m) }
func (*CharactersResponse) ProtoMessage()               {}
func (*CharactersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CharactersResponse) GetList() []*Character {
	if m != nil {
		return m.List
	}
	return nil
}

type Character struct {
	Id            int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	CorporationId int64  `protobuf:"varint,3,opt,name=CorporationId,json=corporationId" json:"CorporationId,omitempty"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Character) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetCorporationId() int64 {
	if m != nil {
		return m.CorporationId
	}
	return 0
}

type RoleResponse struct {
	List []*Role `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *RoleResponse) Reset()                    { *m = RoleResponse{} }
func (m *RoleResponse) String() string            { return proto.CompactTextString(m) }
func (*RoleResponse) ProtoMessage()               {}
func (*RoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RoleResponse) GetList() []*Role {
	if m != nil {
		return m.List
	}
	return nil
}

type Role struct {
	RoleName         string `protobuf:"bytes,1,opt,name=RoleName,json=roleName" json:"RoleName,omitempty"`
	ChatServiceGroup string `protobuf:"bytes,2,opt,name=ChatServiceGroup,json=chatServiceGroup" json:"ChatServiceGroup,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Role) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *Role) GetChatServiceGroup() string {
	if m != nil {
		return m.ChatServiceGroup
	}
	return ""
}

type CorporationsResponse struct {
	List []*Corporation `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *CorporationsResponse) Reset()                    { *m = CorporationsResponse{} }
func (m *CorporationsResponse) String() string            { return proto.CompactTextString(m) }
func (*CorporationsResponse) ProtoMessage()               {}
func (*CorporationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CorporationsResponse) GetList() []*Corporation {
	if m != nil {
		return m.List
	}
	return nil
}

type Corporation struct {
	Id         int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Ticker     string `protobuf:"bytes,3,opt,name=Ticker,json=ticker" json:"Ticker,omitempty"`
	AllianceId int64  `protobuf:"varint,4,opt,name=AllianceId,json=allianceId" json:"AllianceId,omitempty"`
}

func (m *Corporation) Reset()                    { *m = Corporation{} }
func (m *Corporation) String() string            { return proto.CompactTextString(m) }
func (*Corporation) ProtoMessage()               {}
func (*Corporation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Corporation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Corporation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Corporation) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Corporation) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

type AlliancesResponse struct {
	List []*Alliance `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *AlliancesResponse) Reset()                    { *m = AlliancesResponse{} }
func (m *AlliancesResponse) String() string            { return proto.CompactTextString(m) }
func (*AlliancesResponse) ProtoMessage()               {}
func (*AlliancesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AlliancesResponse) GetList() []*Alliance {
	if m != nil {
		return m.List
	}
	return nil
}

type Alliance struct {
	Id     int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Ticker string `protobuf:"bytes,3,opt,name=Ticker,json=ticker" json:"Ticker,omitempty"`
}

func (m *Alliance) Reset()                    { *m = Alliance{} }
func (m *Alliance) String() string            { return proto.CompactTextString(m) }
func (*Alliance) ProtoMessage()               {}
func (*Alliance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Alliance) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Alliance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Alliance) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type EntityAdminResponse struct {
	Success   bool   `protobuf:"varint,1,opt,name=Success,json=success" json:"Success,omitempty"`
	ErrorText string `protobuf:"bytes,2,opt,name=ErrorText,json=errorText" json:"ErrorText,omitempty"`
}

func (m *EntityAdminResponse) Reset()                    { *m = EntityAdminResponse{} }
func (m *EntityAdminResponse) String() string            { return proto.CompactTextString(m) }
func (*EntityAdminResponse) ProtoMessage()               {}
func (*EntityAdminResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EntityAdminResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *EntityAdminResponse) GetErrorText() string {
	if m != nil {
		return m.ErrorText
	}
	return ""
}

type AllianceAdminRequest struct {
	Alliance  *Alliance       `protobuf:"bytes,1,opt,name=Alliance,json=alliance" json:"Alliance,omitempty"`
	Operation EntityOperation `protobuf:"varint,2,opt,name=Operation,json=operation,enum=abaeve.auth.EntityOperation" json:"Operation,omitempty"`
}

func (m *AllianceAdminRequest) Reset()                    { *m = AllianceAdminRequest{} }
func (m *AllianceAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*AllianceAdminRequest) ProtoMessage()               {}
func (*AllianceAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AllianceAdminRequest) GetAlliance() *Alliance {
	if m != nil {
		return m.Alliance
	}
	return nil
}

func (m *AllianceAdminRequest) GetOperation() EntityOperation {
	if m != nil {
		return m.Operation
	}
	return EntityOperation_ADD_OR_UPDATE
}

type CoporationAdminRequest struct {
	Corporation *Corporation    `protobuf:"bytes,1,opt,name=Corporation,json=corporation" json:"Corporation,omitempty"`
	Operation   EntityOperation `protobuf:"varint,2,opt,name=Operation,json=operation,enum=abaeve.auth.EntityOperation" json:"Operation,omitempty"`
}

func (m *CoporationAdminRequest) Reset()                    { *m = CoporationAdminRequest{} }
func (m *CoporationAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*CoporationAdminRequest) ProtoMessage()               {}
func (*CoporationAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CoporationAdminRequest) GetCorporation() *Corporation {
	if m != nil {
		return m.Corporation
	}
	return nil
}

func (m *CoporationAdminRequest) GetOperation() EntityOperation {
	if m != nil {
		return m.Operation
	}
	return EntityOperation_ADD_OR_UPDATE
}

type CharacterAdminRequest struct {
	Character *Character      `protobuf:"bytes,1,opt,name=Character,json=character" json:"Character,omitempty"`
	Operation EntityOperation `protobuf:"varint,2,opt,name=Operation,json=operation,enum=abaeve.auth.EntityOperation" json:"Operation,omitempty"`
}

func (m *CharacterAdminRequest) Reset()                    { *m = CharacterAdminRequest{} }
func (m *CharacterAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*CharacterAdminRequest) ProtoMessage()               {}
func (*CharacterAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CharacterAdminRequest) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *CharacterAdminRequest) GetOperation() EntityOperation {
	if m != nil {
		return m.Operation
	}
	return EntityOperation_ADD_OR_UPDATE
}

type RoleAdminRequest struct {
	Role      *Role           `protobuf:"bytes,1,opt,name=Role,json=role" json:"Role,omitempty"`
	Operation EntityOperation `protobuf:"varint,2,opt,name=Operation,json=operation,enum=abaeve.auth.EntityOperation" json:"Operation,omitempty"`
}

func (m *RoleAdminRequest) Reset()                    { *m = RoleAdminRequest{} }
func (m *RoleAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*RoleAdminRequest) ProtoMessage()               {}
func (*RoleAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RoleAdminRequest) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *RoleAdminRequest) GetOperation() EntityOperation {
	if m != nil {
		return m.Operation
	}
	return EntityOperation_ADD_OR_UPDATE
}

type EntityQueryRequest struct {
	EntityType EntityType `protobuf:"varint,1,opt,name=EntityType,json=entityType,enum=abaeve.auth.EntityType" json:"EntityType,omitempty"`
}

func (m *EntityQueryRequest) Reset()                    { *m = EntityQueryRequest{} }
func (m *EntityQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*EntityQueryRequest) ProtoMessage()               {}
func (*EntityQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *EntityQueryRequest) GetEntityType() EntityType {
	if m != nil {
		return m.EntityType
	}
	return EntityType_ALLIANCE
}

func init() {
	proto.RegisterType((*AuthCreateRequest)(nil), "abaeve.auth.AuthCreateRequest")
	proto.RegisterType((*AuthCreateResponse)(nil), "abaeve.auth.AuthCreateResponse")
	proto.RegisterType((*AuthConfirmRequest)(nil), "abaeve.auth.AuthConfirmRequest")
	proto.RegisterType((*AuthConfirmResponse)(nil), "abaeve.auth.AuthConfirmResponse")
	proto.RegisterType((*GetRolesRequest)(nil), "abaeve.auth.GetRolesRequest")
	proto.RegisterType((*AuthAdminRequest)(nil), "abaeve.auth.AuthAdminRequest")
	proto.RegisterType((*AuthAdminResponse)(nil), "abaeve.auth.AuthAdminResponse")
	proto.RegisterType((*CharactersResponse)(nil), "abaeve.auth.CharactersResponse")
	proto.RegisterType((*Character)(nil), "abaeve.auth.Character")
	proto.RegisterType((*RoleResponse)(nil), "abaeve.auth.RoleResponse")
	proto.RegisterType((*Role)(nil), "abaeve.auth.Role")
	proto.RegisterType((*CorporationsResponse)(nil), "abaeve.auth.CorporationsResponse")
	proto.RegisterType((*Corporation)(nil), "abaeve.auth.Corporation")
	proto.RegisterType((*AlliancesResponse)(nil), "abaeve.auth.AlliancesResponse")
	proto.RegisterType((*Alliance)(nil), "abaeve.auth.Alliance")
	proto.RegisterType((*EntityAdminResponse)(nil), "abaeve.auth.EntityAdminResponse")
	proto.RegisterType((*AllianceAdminRequest)(nil), "abaeve.auth.AllianceAdminRequest")
	proto.RegisterType((*CoporationAdminRequest)(nil), "abaeve.auth.CoporationAdminRequest")
	proto.RegisterType((*CharacterAdminRequest)(nil), "abaeve.auth.CharacterAdminRequest")
	proto.RegisterType((*RoleAdminRequest)(nil), "abaeve.auth.RoleAdminRequest")
	proto.RegisterType((*EntityQueryRequest)(nil), "abaeve.auth.EntityQueryRequest")
	proto.RegisterEnum("abaeve.auth.EntityType", EntityType_name, EntityType_value)
	proto.RegisterEnum("abaeve.auth.EntityOperation", EntityOperation_name, EntityOperation_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserAuthentication service

type UserAuthenticationClient interface {
	// Called by the auth-web to state someone has started the auth process
	Create(ctx context.Context, in *AuthCreateRequest, opts ...client.CallOption) (*AuthCreateResponse, error)
	// Called by the auth-bot or another system to state that they've linked a character to their account
	Confirm(ctx context.Context, in *AuthConfirmRequest, opts ...client.CallOption) (*AuthConfirmResponse, error)
	// Called to get all roles for an already authed user
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...client.CallOption) (*AuthConfirmResponse, error)
}

type userAuthenticationClient struct {
	c           client.Client
	serviceName string
}

func NewUserAuthenticationClient(serviceName string, c client.Client) UserAuthenticationClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "abaeve.auth"
	}
	return &userAuthenticationClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userAuthenticationClient) Create(ctx context.Context, in *AuthCreateRequest, opts ...client.CallOption) (*AuthCreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthentication.Create", in)
	out := new(AuthCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) Confirm(ctx context.Context, in *AuthConfirmRequest, opts ...client.CallOption) (*AuthConfirmResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthentication.Confirm", in)
	out := new(AuthConfirmResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...client.CallOption) (*AuthConfirmResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthentication.GetRoles", in)
	out := new(AuthConfirmResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAuthentication service

type UserAuthenticationHandler interface {
	// Called by the auth-web to state someone has started the auth process
	Create(context.Context, *AuthCreateRequest, *AuthCreateResponse) error
	// Called by the auth-bot or another system to state that they've linked a character to their account
	Confirm(context.Context, *AuthConfirmRequest, *AuthConfirmResponse) error
	// Called to get all roles for an already authed user
	GetRoles(context.Context, *GetRolesRequest, *AuthConfirmResponse) error
}

func RegisterUserAuthenticationHandler(s server.Server, hdlr UserAuthenticationHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserAuthentication{hdlr}, opts...))
}

type UserAuthentication struct {
	UserAuthenticationHandler
}

func (h *UserAuthentication) Create(ctx context.Context, in *AuthCreateRequest, out *AuthCreateResponse) error {
	return h.UserAuthenticationHandler.Create(ctx, in, out)
}

func (h *UserAuthentication) Confirm(ctx context.Context, in *AuthConfirmRequest, out *AuthConfirmResponse) error {
	return h.UserAuthenticationHandler.Confirm(ctx, in, out)
}

func (h *UserAuthentication) GetRoles(ctx context.Context, in *GetRolesRequest, out *AuthConfirmResponse) error {
	return h.UserAuthenticationHandler.GetRoles(ctx, in, out)
}

// Client API for EntityQuery service

type EntityQueryClient interface {
	GetAlliances(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*AlliancesResponse, error)
	GetCorporations(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CorporationsResponse, error)
	GetCharacters(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CharactersResponse, error)
	GetRoles(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*RoleResponse, error)
}

type entityQueryClient struct {
	c           client.Client
	serviceName string
}

func NewEntityQueryClient(serviceName string, c client.Client) EntityQueryClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "abaeve.auth"
	}
	return &entityQueryClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *entityQueryClient) GetAlliances(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*AlliancesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityQuery.GetAlliances", in)
	out := new(AlliancesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityQueryClient) GetCorporations(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CorporationsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityQuery.GetCorporations", in)
	out := new(CorporationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityQueryClient) GetCharacters(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CharactersResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityQuery.GetCharacters", in)
	out := new(CharactersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityQueryClient) GetRoles(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*RoleResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityQuery.GetRoles", in)
	out := new(RoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityQuery service

type EntityQueryHandler interface {
	GetAlliances(context.Context, *EntityQueryRequest, *AlliancesResponse) error
	GetCorporations(context.Context, *EntityQueryRequest, *CorporationsResponse) error
	GetCharacters(context.Context, *EntityQueryRequest, *CharactersResponse) error
	GetRoles(context.Context, *EntityQueryRequest, *RoleResponse) error
}

func RegisterEntityQueryHandler(s server.Server, hdlr EntityQueryHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&EntityQuery{hdlr}, opts...))
}

type EntityQuery struct {
	EntityQueryHandler
}

func (h *EntityQuery) GetAlliances(ctx context.Context, in *EntityQueryRequest, out *AlliancesResponse) error {
	return h.EntityQueryHandler.GetAlliances(ctx, in, out)
}

func (h *EntityQuery) GetCorporations(ctx context.Context, in *EntityQueryRequest, out *CorporationsResponse) error {
	return h.EntityQueryHandler.GetCorporations(ctx, in, out)
}

func (h *EntityQuery) GetCharacters(ctx context.Context, in *EntityQueryRequest, out *CharactersResponse) error {
	return h.EntityQueryHandler.GetCharacters(ctx, in, out)
}

func (h *EntityQuery) GetRoles(ctx context.Context, in *EntityQueryRequest, out *RoleResponse) error {
	return h.EntityQueryHandler.GetRoles(ctx, in, out)
}

// Client API for UserAuthenticationAdmin service

type UserAuthenticationAdminClient interface {
	CharacterRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CharacterRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationAllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationAllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	AllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	AllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	AllianceCharacterLeadershipRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	AllianceCharacterLeadershipRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationCharacterLeadershipRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationCharacterLeadershipRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
}

type userAuthenticationAdminClient struct {
	c           client.Client
	serviceName string
}

func NewUserAuthenticationAdminClient(serviceName string, c client.Client) UserAuthenticationAdminClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "abaeve.auth"
	}
	return &userAuthenticationAdminClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userAuthenticationAdminClient) CharacterRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CharacterRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CharacterRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CharacterRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationAllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationAllianceRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationAllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationAllianceRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) AllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.AllianceRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) AllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.AllianceRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) AllianceCharacterLeadershipRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.AllianceCharacterLeadershipRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) AllianceCharacterLeadershipRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.AllianceCharacterLeadershipRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationCharacterLeadershipRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationCharacterLeadershipRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationCharacterLeadershipRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationCharacterLeadershipRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAuthenticationAdmin service

type UserAuthenticationAdminHandler interface {
	CharacterRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CharacterRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationAllianceRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationAllianceRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	AllianceRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	AllianceRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	AllianceCharacterLeadershipRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	AllianceCharacterLeadershipRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationCharacterLeadershipRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationCharacterLeadershipRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
}

func RegisterUserAuthenticationAdminHandler(s server.Server, hdlr UserAuthenticationAdminHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserAuthenticationAdmin{hdlr}, opts...))
}

type UserAuthenticationAdmin struct {
	UserAuthenticationAdminHandler
}

func (h *UserAuthenticationAdmin) CharacterRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CharacterRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CharacterRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CharacterRoleRemove(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationAllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationAllianceRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationAllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationAllianceRoleRemove(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationRoleRemove(ctx, in, out)
}

func (h *UserAuthenticationAdmin) AllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.AllianceRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) AllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.AllianceRoleRemove(ctx, in, out)
}

func (h *UserAuthenticationAdmin) AllianceCharacterLeadershipRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.AllianceCharacterLeadershipRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) AllianceCharacterLeadershipRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.AllianceCharacterLeadershipRoleRemove(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationCharacterLeadershipRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationCharacterLeadershipRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationCharacterLeadershipRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationCharacterLeadershipRoleRemove(ctx, in, out)
}

// Client API for EntityAdmin service

type EntityAdminClient interface {
	AllianceUpdate(ctx context.Context, in *AllianceAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error)
	CorporationUpdate(ctx context.Context, in *CoporationAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error)
	CharacterUpdate(ctx context.Context, in *CharacterAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error)
	RoleUpdate(ctx context.Context, in *RoleAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error)
}

type entityAdminClient struct {
	c           client.Client
	serviceName string
}

func NewEntityAdminClient(serviceName string, c client.Client) EntityAdminClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "abaeve.auth"
	}
	return &entityAdminClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *entityAdminClient) AllianceUpdate(ctx context.Context, in *AllianceAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityAdmin.AllianceUpdate", in)
	out := new(EntityAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAdminClient) CorporationUpdate(ctx context.Context, in *CoporationAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityAdmin.CorporationUpdate", in)
	out := new(EntityAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAdminClient) CharacterUpdate(ctx context.Context, in *CharacterAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityAdmin.CharacterUpdate", in)
	out := new(EntityAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAdminClient) RoleUpdate(ctx context.Context, in *RoleAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "EntityAdmin.RoleUpdate", in)
	out := new(EntityAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityAdmin service

type EntityAdminHandler interface {
	AllianceUpdate(context.Context, *AllianceAdminRequest, *EntityAdminResponse) error
	CorporationUpdate(context.Context, *CoporationAdminRequest, *EntityAdminResponse) error
	CharacterUpdate(context.Context, *CharacterAdminRequest, *EntityAdminResponse) error
	RoleUpdate(context.Context, *RoleAdminRequest, *EntityAdminResponse) error
}

func RegisterEntityAdminHandler(s server.Server, hdlr EntityAdminHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&EntityAdmin{hdlr}, opts...))
}

type EntityAdmin struct {
	EntityAdminHandler
}

func (h *EntityAdmin) AllianceUpdate(ctx context.Context, in *AllianceAdminRequest, out *EntityAdminResponse) error {
	return h.EntityAdminHandler.AllianceUpdate(ctx, in, out)
}

func (h *EntityAdmin) CorporationUpdate(ctx context.Context, in *CoporationAdminRequest, out *EntityAdminResponse) error {
	return h.EntityAdminHandler.CorporationUpdate(ctx, in, out)
}

func (h *EntityAdmin) CharacterUpdate(ctx context.Context, in *CharacterAdminRequest, out *EntityAdminResponse) error {
	return h.EntityAdminHandler.CharacterUpdate(ctx, in, out)
}

func (h *EntityAdmin) RoleUpdate(ctx context.Context, in *RoleAdminRequest, out *EntityAdminResponse) error {
	return h.EntityAdminHandler.RoleUpdate(ctx, in, out)
}

func init() { proto.RegisterFile("auth-srv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdf, 0x6e, 0xe2, 0xc6,
	0x17, 0x5e, 0x63, 0x42, 0xf0, 0x21, 0x24, 0x64, 0xf2, 0x67, 0xf9, 0xa1, 0x24, 0x9b, 0xf5, 0xaf,
	0x91, 0xd8, 0xa8, 0x45, 0x2d, 0x6d, 0x55, 0x69, 0x2f, 0xaa, 0x5a, 0x86, 0x66, 0x51, 0x09, 0xec,
	0x0e, 0xb0, 0xdb, 0x4a, 0xdb, 0x6e, 0xbd, 0x66, 0x2a, 0xac, 0x24, 0x98, 0xda, 0x26, 0x6a, 0x1e,
	0xa0, 0x17, 0x55, 0x6f, 0xfa, 0x0c, 0x7d, 0x91, 0xbe, 0x46, 0x1f, 0xa2, 0x17, 0x7d, 0x83, 0x56,
	0x33, 0x1e, 0x9b, 0x19, 0xc0, 0x82, 0x14, 0xf6, 0x2a, 0xcc, 0x1c, 0xfb, 0x3b, 0xdf, 0xf9, 0xf7,
	0x1d, 0x2b, 0xb0, 0x6d, 0x8d, 0x83, 0xc1, 0x07, 0xbe, 0x77, 0x5b, 0x19, 0x79, 0x6e, 0xe0, 0xa2,
	0x9c, 0xf5, 0xd6, 0x22, 0xb7, 0xa4, 0x42, 0xaf, 0xf5, 0xbf, 0x14, 0xd8, 0x35, 0xc6, 0xc1, 0xc0,
	0xf4, 0x88, 0x15, 0x10, 0x4c, 0x7e, 0x1c, 0x13, 0x3f, 0x40, 0xfb, 0xb0, 0xd1, 0x75, 0xaf, 0xc8,
	0xb0, 0xa8, 0x9c, 0x2a, 0x65, 0x0d, 0x6f, 0x04, 0xf4, 0x80, 0x3e, 0x01, 0xcd, 0x1c, 0x58, 0x9e,
	0x65, 0x07, 0xc4, 0x2b, 0xa6, 0x4e, 0x95, 0x72, 0xae, 0x7a, 0x58, 0x11, 0xc0, 0x2a, 0xb1, 0x15,
	0x6b, 0x76, 0xf4, 0x13, 0x3d, 0x85, 0x9c, 0xe9, 0x7a, 0x23, 0xd7, 0xb3, 0x02, 0xc7, 0x1d, 0x16,
	0x55, 0xf6, 0x5e, 0x51, 0x7e, 0x6f, 0x62, 0xc7, 0x39, 0x7b, 0x72, 0x40, 0x1f, 0x41, 0xd6, 0xb8,
	0xbe, 0x76, 0xac, 0xa1, 0x4d, 0x8a, 0x69, 0xf6, 0xe2, 0x81, 0xf4, 0x62, 0x64, 0xc4, 0x59, 0x8b,
	0xff, 0x42, 0x47, 0xa0, 0xd1, 0x78, 0x3a, 0xb6, 0x3b, 0x22, 0xc5, 0x8d, 0x53, 0xb5, 0xac, 0x61,
	0xcd, 0x8a, 0x2e, 0xf4, 0xef, 0x00, 0x89, 0xd1, 0xfa, 0x23, 0x77, 0xe8, 0x13, 0x54, 0x09, 0x6f,
	0xc9, 0x30, 0x70, 0x6c, 0xe6, 0xd8, 0x74, 0xfb, 0x84, 0xc7, 0x8e, 0xac, 0x19, 0x0b, 0x2a, 0xc2,
	0x66, 0x67, 0x6c, 0xdb, 0xc4, 0xf7, 0x59, 0x1a, 0xb2, 0x78, 0xd3, 0x0f, 0x8f, 0xfa, 0x6b, 0x8e,
	0xef, 0x0e, 0x7f, 0x70, 0xbc, 0x9b, 0x28, 0x9d, 0x87, 0x90, 0xe9, 0xf9, 0xc4, 0x6b, 0xf4, 0x39,
	0x66, 0x66, 0xcc, 0x4e, 0x09, 0x7e, 0x53, 0x49, 0x7e, 0xf5, 0x2b, 0xd8, 0x93, 0xd0, 0x39, 0x7d,
	0x81, 0x8e, 0x22, 0xd1, 0x41, 0xef, 0x41, 0x3e, 0xae, 0x49, 0xcb, 0xba, 0x89, 0xb0, 0xf3, 0xb6,
	0x78, 0x49, 0xab, 0x8d, 0xdd, 0x6b, 0xe2, 0x17, 0x55, 0x96, 0xae, 0x0d, 0x8f, 0x1e, 0xf4, 0x27,
	0xb0, 0x73, 0x41, 0x02, 0x66, 0x58, 0x10, 0x87, 0xfe, 0x87, 0x02, 0x05, 0x4a, 0xcc, 0xe8, 0xdf,
	0x38, 0xc3, 0xe8, 0xe1, 0x12, 0x64, 0xeb, 0xc3, 0xc0, 0x09, 0xee, 0xd8, 0xe3, 0x6a, 0x59, 0xc5,
	0x59, 0xc2, 0xcf, 0xe8, 0x04, 0x20, 0xb4, 0x71, 0x52, 0xd4, 0x2d, 0x90, 0xf8, 0x06, 0xe9, 0xb0,
	0x15, 0xda, 0xbb, 0x8e, 0x7d, 0x45, 0x3c, 0x4e, 0x6c, 0x8b, 0x08, 0x77, 0xe8, 0xb3, 0x08, 0xa3,
	0x7b, 0x37, 0xa2, 0xdd, 0xa1, 0x96, 0xb7, 0xab, 0x0f, 0xa5, 0xee, 0x98, 0x98, 0x23, 0x70, 0xfa,
	0x1b, 0x21, 0x48, 0xd3, 0xa8, 0x8a, 0x1b, 0x2c, 0x86, 0x34, 0x8d, 0x56, 0xff, 0x9d, 0x8f, 0x01,
	0x8f, 0x80, 0x27, 0x76, 0x95, 0x10, 0x64, 0x7a, 0xea, 0xf2, 0xf4, 0x84, 0x6a, 0xa6, 0xe5, 0xe6,
	0xfa, 0x02, 0x50, 0x5c, 0x4d, 0x3f, 0x26, 0x79, 0x0e, 0xe9, 0xa6, 0xe3, 0x07, 0x8c, 0x60, 0xf2,
	0x40, 0xa6, 0xaf, 0x1d, 0x3f, 0xd0, 0x7b, 0xc2, 0x04, 0xa3, 0x6d, 0x48, 0xf1, 0x4a, 0xaa, 0x38,
	0xe5, 0xf4, 0x69, 0x5e, 0x84, 0x1e, 0x49, 0x0f, 0x69, 0x14, 0xb4, 0x81, 0x26, 0xf3, 0xd8, 0xe8,
	0xb3, 0xf1, 0x55, 0x71, 0xde, 0x16, 0x2f, 0xf5, 0x4f, 0x61, 0x8b, 0x66, 0x34, 0xa6, 0x74, 0x26,
	0x51, 0xda, 0x95, 0x28, 0xb1, 0x07, 0x43, 0x36, 0xad, 0xb0, 0x10, 0x34, 0xcd, 0xf4, 0x2f, 0x73,
	0x1e, 0x36, 0x56, 0xd6, 0xe3, 0x67, 0x74, 0x0e, 0x05, 0x73, 0x60, 0x05, 0x1d, 0xe2, 0xdd, 0x3a,
	0x36, 0xb9, 0xf0, 0xdc, 0xf1, 0x88, 0x13, 0x2c, 0xd8, 0x53, 0xf7, 0x7a, 0x0d, 0xf6, 0x05, 0xb2,
	0x93, 0x0c, 0xbd, 0x2f, 0xd1, 0x49, 0x96, 0x9e, 0x90, 0x95, 0x23, 0xe9, 0xd5, 0x52, 0x59, 0x3a,
	0x84, 0x4c, 0xdc, 0xa8, 0x6c, 0x2e, 0x82, 0xb0, 0x45, 0x4f, 0x00, 0x22, 0x85, 0x6a, 0xf4, 0x59,
	0x35, 0x55, 0x0c, 0x56, 0x7c, 0xa3, 0x7f, 0x0e, 0xbb, 0x91, 0x7d, 0xc2, 0xf6, 0x89, 0xc4, 0x36,
	0x41, 0xef, 0x42, 0xaa, 0x5f, 0x4e, 0xe4, 0x71, 0x15, 0x9e, 0xfa, 0x25, 0xec, 0x85, 0xcd, 0x28,
	0xb7, 0x7f, 0xb2, 0xae, 0x1c, 0x81, 0x56, 0xf7, 0x3c, 0xd7, 0xeb, 0x92, 0x9f, 0x02, 0xee, 0x41,
	0x23, 0xd1, 0x85, 0xfe, 0xb3, 0x02, 0xfb, 0x11, 0x2f, 0x49, 0x12, 0x44, 0x39, 0x57, 0x96, 0x93,
	0xf3, 0xa7, 0xa0, 0xb5, 0x47, 0x84, 0xef, 0x0e, 0xea, 0x69, 0xbb, 0x7a, 0x34, 0x67, 0x8a, 0xe2,
	0x67, 0xb0, 0xe6, 0x46, 0x3f, 0xf5, 0xdf, 0x14, 0x38, 0x34, 0xdd, 0xa8, 0x92, 0x12, 0x93, 0xa9,
	0xa5, 0xa4, 0xdc, 0x67, 0x29, 0xad, 0x42, 0xe9, 0x17, 0x05, 0x0e, 0xe2, 0x09, 0x94, 0x18, 0x49,
	0xcb, 0x55, 0x59, 0x7e, 0xb9, 0xfe, 0x77, 0x2e, 0x63, 0x28, 0xd0, 0xb1, 0x93, 0x58, 0x9c, 0x71,
	0x6d, 0x0c, 0x09, 0xcc, 0x9b, 0x5c, 0x3a, 0x99, 0x2b, 0xb9, 0xbd, 0x04, 0x14, 0x5a, 0x5f, 0x8c,
	0x89, 0x77, 0x17, 0x39, 0x96, 0xe5, 0x52, 0x61, 0x90, 0xcb, 0xc8, 0xe5, 0x79, 0x4d, 0x7c, 0x11,
	0x6d, 0x41, 0xd6, 0x68, 0x36, 0x1b, 0x46, 0xcb, 0xac, 0x17, 0x1e, 0xa0, 0x1d, 0xc8, 0x99, 0x6d,
	0xfc, 0xbc, 0x8d, 0x8d, 0x6e, 0xa3, 0xdd, 0x2a, 0x28, 0x28, 0x0f, 0x9a, 0xf9, 0xcc, 0xc0, 0x86,
	0xd9, 0xad, 0xe3, 0x42, 0x0a, 0x65, 0x21, 0x8d, 0xdb, 0xcd, 0x7a, 0x41, 0x3d, 0xff, 0x10, 0x76,
	0xa6, 0x28, 0xa3, 0x5d, 0xc8, 0x1b, 0xb5, 0xda, 0x9b, 0x36, 0x7e, 0xd3, 0x7b, 0x5e, 0x33, 0xba,
	0x14, 0x0f, 0x20, 0x83, 0xeb, 0x97, 0xed, 0x97, 0xf5, 0x82, 0x52, 0xfd, 0x47, 0x01, 0x44, 0x97,
	0xa1, 0xbc, 0xc0, 0xd1, 0x57, 0x90, 0x09, 0x3f, 0x2e, 0xd0, 0x89, 0xdc, 0xda, 0xd3, 0xdf, 0x58,
	0xa5, 0x47, 0x89, 0xf6, 0x70, 0xfc, 0xf4, 0x07, 0xa8, 0x05, 0x9b, 0x7c, 0xd7, 0xa3, 0x39, 0x4f,
	0x4b, 0xdf, 0x18, 0xa5, 0xd3, 0xe4, 0x07, 0x62, 0xbc, 0x26, 0x64, 0xa3, 0x95, 0x8e, 0xe4, 0x7a,
	0x4d, 0x6d, 0xfa, 0x65, 0xd0, 0xaa, 0x7f, 0xa6, 0x20, 0x27, 0x54, 0x12, 0xbd, 0x80, 0xad, 0x0b,
	0x12, 0xc4, 0x82, 0x36, 0x45, 0x79, 0xb6, 0xe6, 0xa5, 0x93, 0xb9, 0xc3, 0xef, 0x0b, 0x84, 0x5f,
	0xb1, 0x6f, 0x10, 0x51, 0xd4, 0x17, 0xa3, 0x3e, 0x4e, 0x9a, 0x62, 0x11, 0xb8, 0x03, 0x79, 0x0a,
	0x1c, 0x6f, 0xd3, 0xc5, 0xb0, 0x8f, 0xe6, 0x0f, 0xa3, 0x08, 0xfa, 0x4c, 0x48, 0xef, 0x42, 0xbc,
	0xff, 0xcd, 0xce, 0xd6, 0x24, 0xb5, 0xbf, 0x6a, 0xf0, 0x70, 0xb6, 0xb9, 0xd8, 0xa4, 0xa2, 0x0e,
	0xdb, 0x88, 0x5c, 0x0a, 0xd8, 0xfc, 0xf6, 0xd1, 0xf1, 0x4c, 0xb9, 0xc4, 0xa9, 0x2e, 0x9d, 0x24,
	0x99, 0x63, 0xea, 0x2f, 0x61, 0x4f, 0x02, 0xc5, 0xe4, 0xc6, 0xbd, 0x25, 0xab, 0xe3, 0x7e, 0x0b,
	0x25, 0xa1, 0x02, 0xb1, 0xbe, 0xaf, 0x8b, 0xf6, 0xf7, 0x70, 0x9c, 0x00, 0xbf, 0xae, 0x00, 0x7a,
	0x80, 0xc4, 0x45, 0xb0, 0x2e, 0xe2, 0x5f, 0xc3, 0xc1, 0x14, 0xec, 0xba, 0x08, 0x63, 0xd8, 0x59,
	0x7b, 0x9a, 0x7b, 0x80, 0xde, 0x45, 0x6e, 0x09, 0xe8, 0x11, 0x6c, 0xdc, 0x7c, 0x4d, 0x62, 0xf5,
	0x89, 0xe7, 0x0f, 0x9c, 0xd1, 0xda, 0xd8, 0x0f, 0xe0, 0x6c, 0x81, 0x9b, 0x75, 0x05, 0x34, 0x80,
	0x33, 0xa1, 0xaa, 0xef, 0x32, 0xa6, 0x2b, 0x28, 0x2f, 0xf6, 0xb4, 0xa6, 0xb0, 0xaa, 0x7f, 0xc7,
	0x42, 0x1f, 0x2a, 0xd0, 0x2b, 0xd8, 0x8e, 0x12, 0xda, 0x1b, 0xf5, 0xe9, 0xae, 0x7b, 0x3c, 0x57,
	0xc9, 0x25, 0x37, 0xa7, 0x73, 0x04, 0x71, 0x3a, 0xaa, 0xd7, 0xb0, 0x2b, 0x44, 0xc5, 0xb1, 0xff,
	0x3f, 0xa5, 0xe7, 0xf3, 0xbe, 0xe7, 0x96, 0x42, 0xff, 0x06, 0x76, 0xe2, 0x44, 0x71, 0x6c, 0x7d,
	0xbe, 0xa8, 0xdf, 0x1b, 0xba, 0x0d, 0x40, 0x13, 0xce, 0x51, 0x8f, 0x67, 0xa4, 0xfd, 0xbe, 0x80,
	0x6f, 0x33, 0xec, 0x5f, 0x35, 0x1f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x34, 0xfd, 0x07, 0xcb,
	0xbc, 0x11, 0x00, 0x00,
}
