// Code generated by protoc-gen-go.
// source: auth-srv.proto
// DO NOT EDIT!

/*
Package abaeve_auth is a generated protocol buffer package.

It is generated from these files:
	auth-srv.proto

It has these top-level messages:
	AuthCreateRequest
	AuthCreateResponse
	AuthConfirmRequest
	AuthConfirmResponse
	AuthAdminRequest
	AuthAdminResponse
	Character
	Corporation
	Alliance
*/
package abaeve_auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthCreateRequest struct {
	Token       string       `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
	Character   *Character   `protobuf:"bytes,2,opt,name=Character" json:"Character,omitempty"`
	Corporation *Corporation `protobuf:"bytes,3,opt,name=Corporation" json:"Corporation,omitempty"`
	Alliance    *Alliance    `protobuf:"bytes,4,opt,name=Alliance" json:"Alliance,omitempty"`
	AuthScope   []string     `protobuf:"bytes,5,rep,name=AuthScope" json:"AuthScope,omitempty"`
}

func (m *AuthCreateRequest) Reset()                    { *m = AuthCreateRequest{} }
func (m *AuthCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthCreateRequest) ProtoMessage()               {}
func (*AuthCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthCreateRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *AuthCreateRequest) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *AuthCreateRequest) GetCorporation() *Corporation {
	if m != nil {
		return m.Corporation
	}
	return nil
}

func (m *AuthCreateRequest) GetAlliance() *Alliance {
	if m != nil {
		return m.Alliance
	}
	return nil
}

func (m *AuthCreateRequest) GetAuthScope() []string {
	if m != nil {
		return m.AuthScope
	}
	return nil
}

type AuthCreateResponse struct {
	AuthenticationCode string `protobuf:"bytes,1,opt,name=AuthenticationCode" json:"AuthenticationCode,omitempty"`
	Success            bool   `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
}

func (m *AuthCreateResponse) Reset()                    { *m = AuthCreateResponse{} }
func (m *AuthCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthCreateResponse) ProtoMessage()               {}
func (*AuthCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthCreateResponse) GetAuthenticationCode() string {
	if m != nil {
		return m.AuthenticationCode
	}
	return ""
}

func (m *AuthCreateResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type AuthConfirmRequest struct {
	UserId             string `protobuf:"bytes,1,opt,name=UserId" json:"UserId,omitempty"`
	AuthenticationCode string `protobuf:"bytes,2,opt,name=AuthenticationCode" json:"AuthenticationCode,omitempty"`
}

func (m *AuthConfirmRequest) Reset()                    { *m = AuthConfirmRequest{} }
func (m *AuthConfirmRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthConfirmRequest) ProtoMessage()               {}
func (*AuthConfirmRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthConfirmRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AuthConfirmRequest) GetAuthenticationCode() string {
	if m != nil {
		return m.AuthenticationCode
	}
	return ""
}

type AuthConfirmResponse struct {
	Success bool     `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Roles   []string `protobuf:"bytes,2,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *AuthConfirmResponse) Reset()                    { *m = AuthConfirmResponse{} }
func (m *AuthConfirmResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthConfirmResponse) ProtoMessage()               {}
func (*AuthConfirmResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthConfirmResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AuthConfirmResponse) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

type AuthAdminRequest struct {
	EntityId   int64  `protobuf:"varint,1,opt,name=EntityId" json:"EntityId,omitempty"`
	EntityName string `protobuf:"bytes,2,opt,name=EntityName" json:"EntityName,omitempty"`
	Role       string `protobuf:"bytes,3,opt,name=Role" json:"Role,omitempty"`
}

func (m *AuthAdminRequest) Reset()                    { *m = AuthAdminRequest{} }
func (m *AuthAdminRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthAdminRequest) ProtoMessage()               {}
func (*AuthAdminRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AuthAdminRequest) GetEntityId() int64 {
	if m != nil {
		return m.EntityId
	}
	return 0
}

func (m *AuthAdminRequest) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

func (m *AuthAdminRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

type AuthAdminResponse struct {
	EntityId   int64  `protobuf:"varint,1,opt,name=EntityId" json:"EntityId,omitempty"`
	EntityName string `protobuf:"bytes,2,opt,name=EntityName" json:"EntityName,omitempty"`
	Success    bool   `protobuf:"varint,3,opt,name=Success" json:"Success,omitempty"`
}

func (m *AuthAdminResponse) Reset()                    { *m = AuthAdminResponse{} }
func (m *AuthAdminResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthAdminResponse) ProtoMessage()               {}
func (*AuthAdminResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AuthAdminResponse) GetEntityId() int64 {
	if m != nil {
		return m.EntityId
	}
	return 0
}

func (m *AuthAdminResponse) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

func (m *AuthAdminResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Character struct {
	Id   int64  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Character) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Corporation struct {
	Id     int64  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Ticker string `protobuf:"bytes,3,opt,name=Ticker" json:"Ticker,omitempty"`
}

func (m *Corporation) Reset()                    { *m = Corporation{} }
func (m *Corporation) String() string            { return proto.CompactTextString(m) }
func (*Corporation) ProtoMessage()               {}
func (*Corporation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Corporation) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Corporation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Corporation) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type Alliance struct {
	Id     int64  `protobuf:"varint,1,opt,name=Id" json:"Id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Ticker string `protobuf:"bytes,3,opt,name=Ticker" json:"Ticker,omitempty"`
}

func (m *Alliance) Reset()                    { *m = Alliance{} }
func (m *Alliance) String() string            { return proto.CompactTextString(m) }
func (*Alliance) ProtoMessage()               {}
func (*Alliance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Alliance) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Alliance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Alliance) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthCreateRequest)(nil), "abaeve.auth.AuthCreateRequest")
	proto.RegisterType((*AuthCreateResponse)(nil), "abaeve.auth.AuthCreateResponse")
	proto.RegisterType((*AuthConfirmRequest)(nil), "abaeve.auth.AuthConfirmRequest")
	proto.RegisterType((*AuthConfirmResponse)(nil), "abaeve.auth.AuthConfirmResponse")
	proto.RegisterType((*AuthAdminRequest)(nil), "abaeve.auth.AuthAdminRequest")
	proto.RegisterType((*AuthAdminResponse)(nil), "abaeve.auth.AuthAdminResponse")
	proto.RegisterType((*Character)(nil), "abaeve.auth.Character")
	proto.RegisterType((*Corporation)(nil), "abaeve.auth.Corporation")
	proto.RegisterType((*Alliance)(nil), "abaeve.auth.Alliance")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Publisher API

type Publisher interface {
	Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error
}

type publisher struct {
	c     client.Client
	topic string
}

func (p *publisher) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {
	return p.c.Publish(ctx, p.c.NewPublication(p.topic, msg), opts...)
}

func NewPublisher(topic string, c client.Client) Publisher {
	if c == nil {
		c = client.NewClient()
	}
	return &publisher{c, topic}
}

// Subscriber API

func RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {
	return s.Subscribe(s.NewSubscriber(topic, h, opts...))
}

// Client API for UserAuthentication service

type UserAuthenticationClient interface {
	// Called by the auth-web to state someone has started the auth process
	Create(ctx context.Context, in *AuthCreateRequest, opts ...client.CallOption) (*AuthCreateResponse, error)
	// Called by the auth-bot or another system to state that they've linked a character to their account
	Confirm(ctx context.Context, in *AuthConfirmRequest, opts ...client.CallOption) (*AuthConfirmResponse, error)
}

type userAuthenticationClient struct {
	c           client.Client
	serviceName string
}

func NewUserAuthenticationClient(serviceName string, c client.Client) UserAuthenticationClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "abaeve.auth"
	}
	return &userAuthenticationClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userAuthenticationClient) Create(ctx context.Context, in *AuthCreateRequest, opts ...client.CallOption) (*AuthCreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthentication.Create", in)
	out := new(AuthCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationClient) Confirm(ctx context.Context, in *AuthConfirmRequest, opts ...client.CallOption) (*AuthConfirmResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthentication.Confirm", in)
	out := new(AuthConfirmResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAuthentication service

type UserAuthenticationHandler interface {
	// Called by the auth-web to state someone has started the auth process
	Create(context.Context, *AuthCreateRequest, *AuthCreateResponse) error
	// Called by the auth-bot or another system to state that they've linked a character to their account
	Confirm(context.Context, *AuthConfirmRequest, *AuthConfirmResponse) error
}

func RegisterUserAuthenticationHandler(s server.Server, hdlr UserAuthenticationHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserAuthentication{hdlr}, opts...))
}

type UserAuthentication struct {
	UserAuthenticationHandler
}

func (h *UserAuthentication) Create(ctx context.Context, in *AuthCreateRequest, out *AuthCreateResponse) error {
	return h.UserAuthenticationHandler.Create(ctx, in, out)
}

func (h *UserAuthentication) Confirm(ctx context.Context, in *AuthConfirmRequest, out *AuthConfirmResponse) error {
	return h.UserAuthenticationHandler.Confirm(ctx, in, out)
}

// Client API for UserAuthenticationAdmin service

type UserAuthenticationAdminClient interface {
	UserRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	UserRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationAllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationAllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	CorporationRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	AllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
	AllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error)
}

type userAuthenticationAdminClient struct {
	c           client.Client
	serviceName string
}

func NewUserAuthenticationAdminClient(serviceName string, c client.Client) UserAuthenticationAdminClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "abaeve.auth"
	}
	return &userAuthenticationAdminClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *userAuthenticationAdminClient) UserRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.UserRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) UserRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.UserRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationAllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationAllianceRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationAllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationAllianceRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) CorporationRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.CorporationRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) AllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.AllianceRoleAdd", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationAdminClient) AllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, opts ...client.CallOption) (*AuthAdminResponse, error) {
	req := c.c.NewRequest(c.serviceName, "UserAuthenticationAdmin.AllianceRoleRemove", in)
	out := new(AuthAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAuthenticationAdmin service

type UserAuthenticationAdminHandler interface {
	UserRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	UserRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationAllianceRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationAllianceRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	CorporationRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	AllianceRoleAdd(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
	AllianceRoleRemove(context.Context, *AuthAdminRequest, *AuthAdminResponse) error
}

func RegisterUserAuthenticationAdminHandler(s server.Server, hdlr UserAuthenticationAdminHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&UserAuthenticationAdmin{hdlr}, opts...))
}

type UserAuthenticationAdmin struct {
	UserAuthenticationAdminHandler
}

func (h *UserAuthenticationAdmin) UserRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.UserRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) UserRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.UserRoleRemove(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationAllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationAllianceRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationAllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationAllianceRoleRemove(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) CorporationRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.CorporationRoleRemove(ctx, in, out)
}

func (h *UserAuthenticationAdmin) AllianceRoleAdd(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.AllianceRoleAdd(ctx, in, out)
}

func (h *UserAuthenticationAdmin) AllianceRoleRemove(ctx context.Context, in *AuthAdminRequest, out *AuthAdminResponse) error {
	return h.UserAuthenticationAdminHandler.AllianceRoleRemove(ctx, in, out)
}

func init() { proto.RegisterFile("auth-srv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x5f, 0x8f, 0xd2, 0x40,
	0x10, 0xb7, 0x70, 0x70, 0x30, 0x24, 0xa8, 0xa3, 0x77, 0x36, 0x8d, 0x87, 0xa4, 0x4f, 0xbc, 0x58,
	0x23, 0xfa, 0xe4, 0x1b, 0x21, 0x67, 0x42, 0x4c, 0x48, 0xdc, 0x3b, 0x12, 0x1f, 0xd4, 0x58, 0xda,
	0x31, 0x34, 0x07, 0x5d, 0xdc, 0x2e, 0x24, 0x7e, 0x2c, 0x3f, 0x8e, 0xdf, 0xc1, 0x0f, 0x61, 0xb6,
	0xdd, 0x96, 0xed, 0xdd, 0x35, 0x31, 0xa1, 0xbe, 0xed, 0xfc, 0xfb, 0xcd, 0x6f, 0x66, 0x7e, 0x14,
	0xe8, 0xfb, 0x3b, 0xb9, 0x7a, 0x99, 0x88, 0xbd, 0xb7, 0x15, 0x5c, 0x72, 0xec, 0xf9, 0x4b, 0x9f,
	0xf6, 0xe4, 0x29, 0xb7, 0xfb, 0xc7, 0x82, 0xc7, 0x93, 0x9d, 0x5c, 0x4d, 0x05, 0xf9, 0x92, 0x18,
	0xfd, 0xd8, 0x51, 0x22, 0xf1, 0x29, 0xb4, 0xae, 0xf9, 0x0d, 0xc5, 0xb6, 0x35, 0xb4, 0x46, 0x5d,
	0x96, 0x19, 0xf8, 0x16, 0xba, 0xd3, 0x95, 0x2f, 0xfc, 0x40, 0x92, 0xb0, 0x1b, 0x43, 0x6b, 0xd4,
	0x1b, 0x9f, 0x7b, 0x06, 0x98, 0x57, 0x44, 0xd9, 0x21, 0x11, 0xdf, 0x41, 0x6f, 0xca, 0xc5, 0x96,
	0x0b, 0x5f, 0x46, 0x3c, 0xb6, 0x9b, 0x69, 0x9d, 0x5d, 0xae, 0x3b, 0xc4, 0x99, 0x99, 0x8c, 0xaf,
	0xa1, 0x33, 0x59, 0xaf, 0x23, 0x3f, 0x0e, 0xc8, 0x3e, 0x49, 0x0b, 0xcf, 0x4a, 0x85, 0x79, 0x90,
	0x15, 0x69, 0xf8, 0x1c, 0xba, 0x6a, 0x9e, 0xab, 0x80, 0x6f, 0xc9, 0x6e, 0x0d, 0x9b, 0xa3, 0x2e,
	0x3b, 0x38, 0xdc, 0xaf, 0x80, 0xe6, 0xb4, 0xc9, 0x96, 0xc7, 0x09, 0xa1, 0x97, 0x79, 0x29, 0x96,
	0x51, 0x90, 0x36, 0x9e, 0xf2, 0x90, 0xf4, 0xec, 0xf7, 0x44, 0xd0, 0x86, 0xd3, 0xab, 0x5d, 0x10,
	0x50, 0x92, 0xa4, 0x6b, 0xe8, 0xb0, 0xdc, 0x74, 0x3f, 0x6b, 0x7c, 0x1e, 0x7f, 0x8f, 0xc4, 0x26,
	0x5f, 0xe7, 0x39, 0xb4, 0x17, 0x09, 0x89, 0x59, 0xa8, 0x31, 0xb5, 0x55, 0xd1, 0xb7, 0x51, 0xd5,
	0xd7, 0xbd, 0x84, 0x27, 0x25, 0x74, 0x4d, 0xdf, 0xa0, 0x63, 0x95, 0xe8, 0xa8, 0x3b, 0x32, 0xbe,
	0x26, 0x45, 0x53, 0x2d, 0x22, 0x33, 0xdc, 0x25, 0x3c, 0x52, 0x30, 0x93, 0x70, 0x13, 0xc5, 0x39,
	0x45, 0x07, 0x3a, 0x97, 0xb1, 0x8c, 0xe4, 0x4f, 0x4d, 0xb2, 0xc9, 0x0a, 0x1b, 0x07, 0x00, 0xd9,
	0x7b, 0xee, 0x6f, 0x72, 0x7a, 0x86, 0x07, 0x11, 0x4e, 0x14, 0x70, 0x7a, 0xda, 0x2e, 0x4b, 0xdf,
	0x6e, 0x94, 0xc9, 0x4a, 0xf7, 0xd0, 0x44, 0x8f, 0x69, 0x62, 0x0c, 0xd9, 0x2c, 0xef, 0xfc, 0x95,
	0x21, 0x4b, 0xec, 0x43, 0xa3, 0x00, 0x6f, 0xcc, 0x42, 0xc5, 0xcd, 0x00, 0x4c, 0xdf, 0xee, 0xac,
	0xa4, 0xc8, 0x7f, 0x29, 0x51, 0x17, 0xbc, 0x8e, 0x82, 0x1b, 0x12, 0x7a, 0x48, 0x6d, 0xb9, 0xef,
	0x0f, 0x02, 0x3d, 0x06, 0x67, 0xfc, 0xcb, 0x02, 0x54, 0xa2, 0x28, 0x1f, 0x1d, 0x3f, 0x40, 0x3b,
	0x93, 0x2a, 0x0e, 0xca, 0xba, 0xbf, 0xfd, 0x8b, 0x75, 0x5e, 0x54, 0xc6, 0xb3, 0xdd, 0xbb, 0x0f,
	0x70, 0x0e, 0xa7, 0x5a, 0x39, 0x78, 0x4f, 0x76, 0x49, 0xb1, 0xce, 0xb0, 0x3a, 0x21, 0xc7, 0x1b,
	0xff, 0x6e, 0xc1, 0xb3, 0xbb, 0x9c, 0xd3, 0x8b, 0xe3, 0x1c, 0x7a, 0x2a, 0xa4, 0xa4, 0x30, 0x09,
	0x43, 0xbc, 0xb8, 0x03, 0x67, 0x8a, 0xcf, 0x19, 0x54, 0x85, 0x0b, 0xee, 0x1f, 0xa1, 0x9f, 0xe3,
	0x31, 0xda, 0xf0, 0x3d, 0x1d, 0x0f, 0xf9, 0x05, 0x1c, 0x43, 0x05, 0xc5, 0x97, 0xa4, 0x2e, 0xc6,
	0xdf, 0xe0, 0xa2, 0x02, 0xbe, 0xae, 0x01, 0x16, 0x80, 0xe6, 0x87, 0xb3, 0x2e, 0xe2, 0x9f, 0xe0,
	0xec, 0x16, 0x6c, 0x5d, 0x84, 0x19, 0x3c, 0xac, 0x7d, 0xcd, 0x0b, 0xc0, 0xff, 0xb0, 0xdb, 0x65,
	0x3b, 0xfd, 0xab, 0x7c, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xc6, 0xbe, 0xc7, 0x3c, 0x07,
	0x00, 0x00,
}
