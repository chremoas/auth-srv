syntax = "proto3";

package abaeve.auth;

enum EntityType {
    ALLIANCE = 0;
    CORPORATION = 1;
    CHARACTER = 2;
    ROLE = 3;
}

enum EntityOperation {
    ADD_OR_UPDATE = 0;
    REMOVE = 1;
}

service UserAuthentication {
    //Called by the auth-web to state someone has started the auth process
    rpc Create (AuthCreateRequest) returns (AuthCreateResponse) {
    };
    //Called by the auth-bot or another system to state that they've linked a character to their account
    rpc Confirm (AuthConfirmRequest) returns (AuthConfirmResponse) {
    };
    //Called to get all roles for an already authed user
    rpc GetRoles (GetRolesRequest) returns (AuthConfirmResponse) {
    };
}

service EntityQuery {
    rpc GetAlliances (EntityQueryRequest) returns (AlliancesResponse) {
    };
    rpc GetCorporations (EntityQueryRequest) returns (CorporationsResponse) {
    };
    rpc GetCharacters (EntityQueryRequest) returns (CharactersResponse) {
    };
    rpc GetRoles (EntityQueryRequest) returns (RoleResponse) {
    };
}

service UserAuthenticationAdmin {
    rpc CharacterRoleAdd (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc CharacterRoleRemove (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc CorporationAllianceRoleAdd (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc CorporationAllianceRoleRemove (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc CorporationRoleAdd (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc CorporationRoleRemove (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc AllianceRoleAdd (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc AllianceRoleRemove (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc AllianceCharacterLeadershipRoleAdd (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc AllianceCharacterLeadershipRoleRemove (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc CorporationCharacterLeadershipRoleAdd (AuthAdminRequest) returns (AuthAdminResponse) {
    };
    rpc CorporationCharacterLeadershipRoleRemove (AuthAdminRequest) returns (AuthAdminResponse) {
    };
}

service EntityAdmin {
    rpc AllianceUpdate (AllianceAdminRequest) returns (EntityAdminResponse) {
    };
    rpc CorporationUpdate (CoporationAdminRequest) returns (EntityAdminResponse) {
    };
    rpc CharacterUpdate (CharacterAdminRequest) returns (EntityAdminResponse) {
    };
}

message AuthCreateRequest {
    string Token = 1;
    Character Character = 2;
    Corporation Corporation = 3;
    Alliance Alliance = 4;
    repeated string AuthScope = 5;
}

message AuthCreateResponse {
    string AuthenticationCode = 1;
    bool Success = 2;
}

message AuthConfirmRequest {
    string UserId = 1;
    string AuthenticationCode = 2;
}

message AuthConfirmResponse {
    bool Success = 1;
    string CharacterName = 2;
    repeated string Roles = 3;
}

message GetRolesRequest {
    string UserId = 1;
}

message AuthAdminRequest {
    repeated int64 EntityId = 1;
    repeated string EntityName = 2;
    repeated string EntityTicker = 3;
    repeated EntityType EntityType = 4;
    string Role = 5;
}

message AuthAdminResponse {
    repeated int64 EntityId = 1;
    repeated string EntityName = 2;
    repeated EntityType EntityType = 3;
    bool Success = 4;
}

message CharactersResponse {
    repeated Character List = 1;
}

message Character {
    int64 Id = 1;
    string Name = 2;
    int64 CorporationId = 3;
}

message RoleResponse {
    repeated Role List = 1;
}

message Role {
    string Name = 1;
    string RoleName = 2;
}

message CorporationsResponse {
    repeated Corporation List = 1;
}

message Corporation {
    int64 Id = 1;
    string Name = 2;
    string Ticker = 3;
    int64 AllianceId = 4;
}

message AlliancesResponse {
    repeated Alliance List = 1;
}

message Alliance {
    int64 Id = 1;
    string Name = 2;
    string Ticker = 3;
}

message EntityAdminResponse {
    bool Success = 1;
    string ErrorText = 2;
}

message AllianceAdminRequest {
    Alliance Alliance = 1;
    EntityOperation Operation = 2;
}

message CoporationAdminRequest {
    Corporation Corporation = 1;
    EntityOperation Operation = 2;
}

message CharacterAdminRequest {
    Character Character = 1;
    EntityOperation Operation = 2;
}

message EntityQueryRequest {
    EntityType EntityType = 1;
}
