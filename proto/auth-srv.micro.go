// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth-srv.proto

/*
Package abaeve_auth is a generated protocol buffer package.

It is generated from these files:
	auth-srv.proto

It has these top-level messages:
	SyncRequest
	Role
	SyncToRoleResponse
	AuthCreateRequest
	AuthCreateResponse
	AuthConfirmRequest
	AuthConfirmResponse
	CharactersResponse
	Character
	CorporationsResponse
	Corporation
	AlliancesResponse
	Alliance
	EntityAdminResponse
	AllianceAdminRequest
	CorporationAdminRequest
	CharacterAdminRequest
	EntityQueryRequest
*/
package abaeve_auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserAuthentication service

type UserAuthenticationService interface {
	// Called by the auth-web to state someone has started the auth process
	Create(ctx context.Context, in *AuthCreateRequest, opts ...client.CallOption) (*AuthCreateResponse, error)
	// Called by the auth-bot or another system to state that they've linked a character to their account
	Confirm(ctx context.Context, in *AuthConfirmRequest, opts ...client.CallOption) (*AuthConfirmResponse, error)
	SyncToRoleService(ctx context.Context, in *SyncRequest, opts ...client.CallOption) (*SyncToRoleResponse, error)
}

type userAuthenticationService struct {
	c    client.Client
	name string
}

func NewUserAuthenticationService(name string, c client.Client) UserAuthenticationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "abaeve.auth"
	}
	return &userAuthenticationService{
		c:    c,
		name: name,
	}
}

func (c *userAuthenticationService) Create(ctx context.Context, in *AuthCreateRequest, opts ...client.CallOption) (*AuthCreateResponse, error) {
	req := c.c.NewRequest(c.name, "UserAuthentication.Create", in)
	out := new(AuthCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationService) Confirm(ctx context.Context, in *AuthConfirmRequest, opts ...client.CallOption) (*AuthConfirmResponse, error) {
	req := c.c.NewRequest(c.name, "UserAuthentication.Confirm", in)
	out := new(AuthConfirmResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthenticationService) SyncToRoleService(ctx context.Context, in *SyncRequest, opts ...client.CallOption) (*SyncToRoleResponse, error) {
	req := c.c.NewRequest(c.name, "UserAuthentication.SyncToRoleService", in)
	out := new(SyncToRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserAuthentication service

type UserAuthenticationHandler interface {
	// Called by the auth-web to state someone has started the auth process
	Create(context.Context, *AuthCreateRequest, *AuthCreateResponse) error
	// Called by the auth-bot or another system to state that they've linked a character to their account
	Confirm(context.Context, *AuthConfirmRequest, *AuthConfirmResponse) error
	SyncToRoleService(context.Context, *SyncRequest, *SyncToRoleResponse) error
}

func RegisterUserAuthenticationHandler(s server.Server, hdlr UserAuthenticationHandler, opts ...server.HandlerOption) {
	type userAuthentication interface {
		Create(ctx context.Context, in *AuthCreateRequest, out *AuthCreateResponse) error
		Confirm(ctx context.Context, in *AuthConfirmRequest, out *AuthConfirmResponse) error
		SyncToRoleService(ctx context.Context, in *SyncRequest, out *SyncToRoleResponse) error
	}
	type UserAuthentication struct {
		userAuthentication
	}
	h := &userAuthenticationHandler{hdlr}
	s.Handle(s.NewHandler(&UserAuthentication{h}, opts...))
}

type userAuthenticationHandler struct {
	UserAuthenticationHandler
}

func (h *userAuthenticationHandler) Create(ctx context.Context, in *AuthCreateRequest, out *AuthCreateResponse) error {
	return h.UserAuthenticationHandler.Create(ctx, in, out)
}

func (h *userAuthenticationHandler) Confirm(ctx context.Context, in *AuthConfirmRequest, out *AuthConfirmResponse) error {
	return h.UserAuthenticationHandler.Confirm(ctx, in, out)
}

func (h *userAuthenticationHandler) SyncToRoleService(ctx context.Context, in *SyncRequest, out *SyncToRoleResponse) error {
	return h.UserAuthenticationHandler.SyncToRoleService(ctx, in, out)
}

// Client API for EntityQuery service

type EntityQueryService interface {
	GetAlliances(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*AlliancesResponse, error)
	GetCorporations(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CorporationsResponse, error)
	GetCharacters(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CharactersResponse, error)
}

type entityQueryService struct {
	c    client.Client
	name string
}

func NewEntityQueryService(name string, c client.Client) EntityQueryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "abaeve.auth"
	}
	return &entityQueryService{
		c:    c,
		name: name,
	}
}

func (c *entityQueryService) GetAlliances(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*AlliancesResponse, error) {
	req := c.c.NewRequest(c.name, "EntityQuery.GetAlliances", in)
	out := new(AlliancesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityQueryService) GetCorporations(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CorporationsResponse, error) {
	req := c.c.NewRequest(c.name, "EntityQuery.GetCorporations", in)
	out := new(CorporationsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityQueryService) GetCharacters(ctx context.Context, in *EntityQueryRequest, opts ...client.CallOption) (*CharactersResponse, error) {
	req := c.c.NewRequest(c.name, "EntityQuery.GetCharacters", in)
	out := new(CharactersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityQuery service

type EntityQueryHandler interface {
	GetAlliances(context.Context, *EntityQueryRequest, *AlliancesResponse) error
	GetCorporations(context.Context, *EntityQueryRequest, *CorporationsResponse) error
	GetCharacters(context.Context, *EntityQueryRequest, *CharactersResponse) error
}

func RegisterEntityQueryHandler(s server.Server, hdlr EntityQueryHandler, opts ...server.HandlerOption) {
	type entityQuery interface {
		GetAlliances(ctx context.Context, in *EntityQueryRequest, out *AlliancesResponse) error
		GetCorporations(ctx context.Context, in *EntityQueryRequest, out *CorporationsResponse) error
		GetCharacters(ctx context.Context, in *EntityQueryRequest, out *CharactersResponse) error
	}
	type EntityQuery struct {
		entityQuery
	}
	h := &entityQueryHandler{hdlr}
	s.Handle(s.NewHandler(&EntityQuery{h}, opts...))
}

type entityQueryHandler struct {
	EntityQueryHandler
}

func (h *entityQueryHandler) GetAlliances(ctx context.Context, in *EntityQueryRequest, out *AlliancesResponse) error {
	return h.EntityQueryHandler.GetAlliances(ctx, in, out)
}

func (h *entityQueryHandler) GetCorporations(ctx context.Context, in *EntityQueryRequest, out *CorporationsResponse) error {
	return h.EntityQueryHandler.GetCorporations(ctx, in, out)
}

func (h *entityQueryHandler) GetCharacters(ctx context.Context, in *EntityQueryRequest, out *CharactersResponse) error {
	return h.EntityQueryHandler.GetCharacters(ctx, in, out)
}

// Client API for EntityAdmin service

type EntityAdminService interface {
	AllianceUpdate(ctx context.Context, in *AllianceAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error)
	CorporationUpdate(ctx context.Context, in *CorporationAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error)
	CharacterUpdate(ctx context.Context, in *CharacterAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error)
}

type entityAdminService struct {
	c    client.Client
	name string
}

func NewEntityAdminService(name string, c client.Client) EntityAdminService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "abaeve.auth"
	}
	return &entityAdminService{
		c:    c,
		name: name,
	}
}

func (c *entityAdminService) AllianceUpdate(ctx context.Context, in *AllianceAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error) {
	req := c.c.NewRequest(c.name, "EntityAdmin.AllianceUpdate", in)
	out := new(EntityAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAdminService) CorporationUpdate(ctx context.Context, in *CorporationAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error) {
	req := c.c.NewRequest(c.name, "EntityAdmin.CorporationUpdate", in)
	out := new(EntityAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityAdminService) CharacterUpdate(ctx context.Context, in *CharacterAdminRequest, opts ...client.CallOption) (*EntityAdminResponse, error) {
	req := c.c.NewRequest(c.name, "EntityAdmin.CharacterUpdate", in)
	out := new(EntityAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityAdmin service

type EntityAdminHandler interface {
	AllianceUpdate(context.Context, *AllianceAdminRequest, *EntityAdminResponse) error
	CorporationUpdate(context.Context, *CorporationAdminRequest, *EntityAdminResponse) error
	CharacterUpdate(context.Context, *CharacterAdminRequest, *EntityAdminResponse) error
}

func RegisterEntityAdminHandler(s server.Server, hdlr EntityAdminHandler, opts ...server.HandlerOption) {
	type entityAdmin interface {
		AllianceUpdate(ctx context.Context, in *AllianceAdminRequest, out *EntityAdminResponse) error
		CorporationUpdate(ctx context.Context, in *CorporationAdminRequest, out *EntityAdminResponse) error
		CharacterUpdate(ctx context.Context, in *CharacterAdminRequest, out *EntityAdminResponse) error
	}
	type EntityAdmin struct {
		entityAdmin
	}
	h := &entityAdminHandler{hdlr}
	s.Handle(s.NewHandler(&EntityAdmin{h}, opts...))
}

type entityAdminHandler struct {
	EntityAdminHandler
}

func (h *entityAdminHandler) AllianceUpdate(ctx context.Context, in *AllianceAdminRequest, out *EntityAdminResponse) error {
	return h.EntityAdminHandler.AllianceUpdate(ctx, in, out)
}

func (h *entityAdminHandler) CorporationUpdate(ctx context.Context, in *CorporationAdminRequest, out *EntityAdminResponse) error {
	return h.EntityAdminHandler.CorporationUpdate(ctx, in, out)
}

func (h *entityAdminHandler) CharacterUpdate(ctx context.Context, in *CharacterAdminRequest, out *EntityAdminResponse) error {
	return h.EntityAdminHandler.CharacterUpdate(ctx, in, out)
}
