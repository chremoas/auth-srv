// Automatically generated by pegomock. DO NOT EDIT!
// Source: github.com/chremoas/auth-srv/proto (interfaces: UserAuthenticationAdminClient)

package authsrv_mocks

import (
	context "context"
	proto "github.com/chremoas/auth-srv/proto"
	client "github.com/micro/go-micro/client"
	pegomock "github.com/petergtz/pegomock"
	"reflect"
)

type MockUserAuthenticationAdminClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockUserAuthenticationAdminClient() *MockUserAuthenticationAdminClient {
	return &MockUserAuthenticationAdminClient{fail: pegomock.GlobalFailHandler}
}

func (mock *MockUserAuthenticationAdminClient) AllianceCharacterLeadershipRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("AllianceCharacterLeadershipRoleAdd", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) AllianceCharacterLeadershipRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("AllianceCharacterLeadershipRoleRemove", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) AllianceRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("AllianceRoleAdd", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) AllianceRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("AllianceRoleRemove", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) CharacterRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CharacterRoleAdd", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) CharacterRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CharacterRoleRemove", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) CorporationAllianceRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CorporationAllianceRoleAdd", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) CorporationAllianceRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CorporationAllianceRoleRemove", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) CorporationCharacterLeadershipRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CorporationCharacterLeadershipRoleAdd", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) CorporationCharacterLeadershipRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CorporationCharacterLeadershipRoleRemove", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) CorporationRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CorporationRoleAdd", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) CorporationRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) (*proto.AuthAdminResponse, error) {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CorporationRoleRemove", params, []reflect.Type{reflect.TypeOf((**proto.AuthAdminResponse)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *proto.AuthAdminResponse
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*proto.AuthAdminResponse)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockUserAuthenticationAdminClient) VerifyWasCalledOnce() *VerifierUserAuthenticationAdminClient {
	return &VerifierUserAuthenticationAdminClient{mock, pegomock.Times(1), nil}
}

func (mock *MockUserAuthenticationAdminClient) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierUserAuthenticationAdminClient {
	return &VerifierUserAuthenticationAdminClient{mock, invocationCountMatcher, nil}
}

func (mock *MockUserAuthenticationAdminClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierUserAuthenticationAdminClient {
	return &VerifierUserAuthenticationAdminClient{mock, invocationCountMatcher, inOrderContext}
}

type VerifierUserAuthenticationAdminClient struct {
	mock                   *MockUserAuthenticationAdminClient
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
}

func (verifier *VerifierUserAuthenticationAdminClient) AllianceCharacterLeadershipRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleAdd_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AllianceCharacterLeadershipRoleAdd", params)
	return &UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleAdd_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleAdd_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleAdd_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleAdd_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) AllianceCharacterLeadershipRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleRemove_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AllianceCharacterLeadershipRoleRemove", params)
	return &UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleRemove_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleRemove_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleRemove_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_AllianceCharacterLeadershipRoleRemove_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) AllianceRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_AllianceRoleAdd_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AllianceRoleAdd", params)
	return &UserAuthenticationAdminClient_AllianceRoleAdd_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_AllianceRoleAdd_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_AllianceRoleAdd_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_AllianceRoleAdd_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) AllianceRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_AllianceRoleRemove_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "AllianceRoleRemove", params)
	return &UserAuthenticationAdminClient_AllianceRoleRemove_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_AllianceRoleRemove_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_AllianceRoleRemove_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_AllianceRoleRemove_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) CharacterRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_CharacterRoleAdd_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CharacterRoleAdd", params)
	return &UserAuthenticationAdminClient_CharacterRoleAdd_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_CharacterRoleAdd_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_CharacterRoleAdd_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_CharacterRoleAdd_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) CharacterRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_CharacterRoleRemove_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CharacterRoleRemove", params)
	return &UserAuthenticationAdminClient_CharacterRoleRemove_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_CharacterRoleRemove_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_CharacterRoleRemove_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_CharacterRoleRemove_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) CorporationAllianceRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_CorporationAllianceRoleAdd_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CorporationAllianceRoleAdd", params)
	return &UserAuthenticationAdminClient_CorporationAllianceRoleAdd_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_CorporationAllianceRoleAdd_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_CorporationAllianceRoleAdd_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_CorporationAllianceRoleAdd_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) CorporationAllianceRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_CorporationAllianceRoleRemove_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CorporationAllianceRoleRemove", params)
	return &UserAuthenticationAdminClient_CorporationAllianceRoleRemove_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_CorporationAllianceRoleRemove_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_CorporationAllianceRoleRemove_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_CorporationAllianceRoleRemove_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) CorporationCharacterLeadershipRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleAdd_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CorporationCharacterLeadershipRoleAdd", params)
	return &UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleAdd_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleAdd_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleAdd_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleAdd_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) CorporationCharacterLeadershipRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleRemove_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CorporationCharacterLeadershipRoleRemove", params)
	return &UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleRemove_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleRemove_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleRemove_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_CorporationCharacterLeadershipRoleRemove_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) CorporationRoleAdd(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_CorporationRoleAdd_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CorporationRoleAdd", params)
	return &UserAuthenticationAdminClient_CorporationRoleAdd_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_CorporationRoleAdd_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_CorporationRoleAdd_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_CorporationRoleAdd_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}

func (verifier *VerifierUserAuthenticationAdminClient) CorporationRoleRemove(_param0 context.Context, _param1 *proto.AuthAdminRequest, _param2 ...client.CallOption) *UserAuthenticationAdminClient_CorporationRoleRemove_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	for _, param := range _param2 {
		params = append(params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CorporationRoleRemove", params)
	return &UserAuthenticationAdminClient_CorporationRoleRemove_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type UserAuthenticationAdminClient_CorporationRoleRemove_OngoingVerification struct {
	mock              *MockUserAuthenticationAdminClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *UserAuthenticationAdminClient_CorporationRoleRemove_OngoingVerification) GetCapturedArguments() (context.Context, *proto.AuthAdminRequest, []client.CallOption) {
	_param0, _param1, _param2 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1], _param2[len(_param2)-1]
}

func (c *UserAuthenticationAdminClient_CorporationRoleRemove_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []*proto.AuthAdminRequest, _param2 [][]client.CallOption) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]context.Context, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(context.Context)
		}
		_param1 = make([]*proto.AuthAdminRequest, len(params[1]))
		for u, param := range params[1] {
			_param1[u] = param.(*proto.AuthAdminRequest)
		}
		_param2 = make([][]client.CallOption, len(params[2]))
		for u := range params[0] {
			_param2[u] = make([]client.CallOption, len(params)-2)
			for x := 2; x < len(params); x++ {
				if params[x][u] != nil {
					_param2[u][x-2] = params[x][u].(client.CallOption)
				}
			}
		}
	}
	return
}
